<h1>Ejercicio con D3: MaGAYzines</h1>

<!-- div donde se inyectará la visualizción de D3js -->
<div id="viz"></div>

<!-- carga desde el servidor de D3 la librería -->
<!-- cabe anotar que esta podría estar alojada localmente en la carpeta -->
<!-- public del proyecto -->
<script src="https://d3js.org/d3.v4.min.js"></script>

<!-- script de JS que hace las peticiones al servidor y crea la visualización-->
<script type="text/javascript">

// Función encargadad de la visualización de datos por medio de D3
function viz(data){
  // selecciona la división donde se inyectará el SVG
  var svg = d3.select('#viz')
    .append('svg') // agrega un elemento SVG
    .attr('width', 600) // al SVG le agrega el atributo ancho de 400px
    .attr('height', 400) // al SVG le agrega el atributo alto de 200px
    .style("background-color", "#EEEEEE");

  var elem = svg.selectAll('g') // selecciona todos los elementos `g` (grupos)
    .data(data) // enlaza los datos del servidor

  var elemEnter = elem.enter()
      .append('g') // agrega un grupo
      .attr('transform', function(d,i){ // aplica una transformación al elemento
        return "translate("+(150*i+80)+", 150)" // calcula la posción relativo a
                                              // los datos
      })

  var circulo = elemEnter.append('circle') // agrega un circulo
    .attr('stroke', 'black') // la línea de contorno será negra
    .attr('fill', function(d){ // el color de relleno se aplica según el
                               // resultado de esta función
      if(d.public){     // si el elemento actual es público
        return 'blue'  // el color de relleno será azul
      } else {          // de lo contrario (será público)
        return 'red'    // el color de relleno será rojo
      }
    })

    .attr('r', function(d){ // el radio dependerá de la cantidad de items en la
      return d.items.count * 10 // colección
    })

  // crea los textos etiquetando cada uno de los círculos
  var txt = elemEnter.append('text') //agrega un elemento de tipo text
    .attr('dy', -30) // la posición en y
    .attr('dx', -30) // la posición en x
    .text(function(d){ // extrae el texto de la información del servidor
      return d.element_texts[0].text
    })

}

// Rutina para hacer la petición al servidor de Omeka
// 1. crea una nueva instancia de XMLHttpRequest
var request = new XMLHttpRequest();
// variables para construir la URL final para donde se hace la petición
// servidor proxy para souclionar problemas de CORS (ver README)
var CORS_PROXY = 'http://192.169.250.12:8088/';
// usa el proxy?
var use_cors = true;
//la URL del API (http://miomeka.org/api)
var baseUrl = 'http://magayzines.omeka.net/api';
// el key generado por omeka
var API_KEY = 'ad624b21910433a9caa2cb82877810e2af1229ad';

// comstruye la URL final a partir de los datos suministrados anteriormente
var URL = '' // variable donde se guardará la URL final
// Si va a usar el proxy
if (use_cors){
  // concatena todas las variables
  // http://192.169.250.12:8088/http://miomeka.org/api/collections?key=API_KEY
  URL = CORS_PROXY+baseUrl+'/collections?key='+API_KEY
// si no usa el proxy
} else {
  // concatena todas las variables
  // http://miomeka.org/api/collections?key=API_KEY
  URL = baseUrl+'/collections?key='+API_KEY
}

// 2. abre una conexión al servidor usando el método GET
// la URL debe estar construida así:
request.open('GET', URL, true);

// cuando se ejecuta la conexión con el servidor y obtenemos respuesta
request.onload = function() {
  // si la petición se ejecuta correctamente
  if (request.status >= 200 && request.status < 400) {
    // convertimos la repuesta del servidor en un objeto JSON
    var resp = JSON.parse(request.responseText);
    // ejecuta la función de visualizacion
    viz(resp)
  } else {
    // si hay un error en la conexión, escribe en la consola el error
    console.log('Oops! tenemos un error', request.status)
  }
};

// si hay un error, este evento se ejecuta para informar que algo pasó
request.onerror = function() {
  // algo pasó en el intento de conexión
  console.log('Error!!')
};
// hace la petición al servidor
request.send();

</script>
